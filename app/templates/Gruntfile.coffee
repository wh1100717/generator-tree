module.exports = (grunt) ->
    'use strict'

    pkg = grunt.file.readJSON 'package.json'

    convert = (name, path, contents) ->
        while true
            item = contents.match(/(.+) = require\(['"].+['"]\);/)
            break if not item?
            for k, v of item
                moduleName = v.trim() if k is "1"
                contents = contents.replace(new RegExp("(var.*) " + moduleName + ",?"), "$1")
                contents = contents.replace(/(var.*), *;/, "$1;")
            contents = contents.replace(/(.+) = require\(['"].+['"]\);/, "")
        contents = contents.replace(/.*Generated by CoffeeScript.*\n/, "")
        exportVar = contents.match(/return module.exports = (.*);/)[1]
        contents = contents.replace(/return module.exports = (.*);\n/, "return $1;")
        contents = contents.replace(/(.+) = require\(['"]$/, "")
        contents = contents.replace(/define\([^{]*?{/, "").replace(/\}\);[^}\w]*$/, "")
        contents = contents.replace(/define\(\[[^\]]+\]\)[\W\n]+$/, "")
        contents = contents.replace(/version = \"\";/, "version = \"#{pkg.version}\"")
        contents = "var #{exportVar} = (function(){\n" + contents
        contents += "\n})();\n"
        return contents


    require('load-grunt-tasks')(grunt)

    grunt.initConfig {
        pkg: pkg
        banner: """
        /*
         * <%= pkg.name %>
         * Copyright <%= grunt.template.today("yyyy-mm-dd") %> <%= pkg.author %>
         */
        """
        karma: {
            unit: {
                configFile: 'karma.conf.coffee'
                singleRun: true
            }
        }
        clean: {
            build: ['dist/<%= pkg.version %>']
        }
        less: {
            compileCore: {
                options: {
                    strictMath: true,
                    sourceMap: true,
                    outputSourceFiles: true,
                    sourceMapURL: '<%= pkg.name %>.css.map'
                    sourceMapFilename: 'dist/<%= pkg.version %>/css/<%= pkg.name %>.css.map'
                }
                files: {
                    'dist/<%= pkg.version %>/css/<%= pkg.name %>.css': 'src/less/<%= pkg.name %>.less'
                }
            }
        }
        # csscomb: {
        #     options: {
        #         config: 'less/.csscomb.json'
        #     }
        #     dist: {
        #         files: {
        #             'dist/css/<%= pkg.name %>.css': 'dist/css/<%= pkg.name %>.css'
        #         }
        #     }
        # }
        cssmin: {
            options: {
                keepSpecialComments: '*'
                noAdvanced: true
            }
            core: {
                files: {
                    'dist/<%= pkg.version %>/css/<%= pkg.name %>.min.css': 'dist/<%= pkg.version %>/css/<%= pkg.name %>.css'
                }
            }
        }
        usebanner: {
            dist: {
                options: {
                    position: 'top'
                    banner: '<%= banner %>'
                }
                files: {
                    src: [
                        'dist/<%= pkg.version %>/css/<%= pkg.name %>.css'
                        'dist/<%= pkg.version %>/css/<%= pkg.name %>.min.css'
                    ]
                }
            }
        }
        requirejs: {
            ### r.js exmaple build file
             *  https://github.com/jrburke/r.js/blob/master/build/example.build.js
            ###
            compile: {
                options: {
                    name: "<%= pkg.name %>"
                    baseUrl: "src/js/"
                    out: "dist/<%= pkg.version %>/js/<%= pkg.name %>.js"
                    optimize: 'none'
                    # Include dependencies loaded with require
                    findNestedDependencies: true
                    # Avoid breaking semicolons inserted by r.js
                    skipSemiColonInsertion: true
                    wrap: {
                        startFile: "src/js/wrap.start"
                        endFile: "src/js/wrap.end"
                    }
                    onBuildWrite: convert
                }
            }
        }
        copy: {
            main: {
                files: {
                    "dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.js": ["dist/<%= pkg.version %>/js/<%= pkg.name %>.js"]
                }
                options: {
                    process: (content, srcpath) -> "define(function(require, exports, module) {#{content}});"
                }
            }
        }
        uglify: {
            standalone: {
                files: {
                    "dist/<%= pkg.version %>/js/<%= pkg.name %>.min.js": ["dist/<%= pkg.version %>/js/<%= pkg.name %>.js"]
                }
                options: {
                    banner: '<%= banner %>'
                    preserveComments: false
                    sourceMap: true
                    sourceMapName: "dist/<%= pkg.version %>/js/<%= pkg.name %>.min.map"
                    report: "min"
                    beautify: {
                        "ascii_only": true
                    }
                    compress: {
                        "hoist_funs": false
                        loops: false
                        unused: false
                    }
                }
            }
            sea: {
                files: {
                    "dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.min.js": ["dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.js"]
                }
                options: {
                    banner: '<%= banner %>'
                    preserveComments: false
                    sourceMap: true
                    sourceMapName: "dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.min.map"
                    report: "min"
                    beautify: {
                        "ascii_only": true
                    }
                    compress: {
                        "hoist_funs": false
                        loops: false
                        unused: false
                    }
                }
            }
        }
        coveralls: {
            options: {
                debug: true
                coverage_dir: 'coverage/'
                dryRun: if process.env.TRAVIS? then false else true
                force: true
                recursive: true
            }
        }
        connect: {
            options: {
                port: 9007
                livereload: 42201
                hostname: 'localhost'
                base: '.'
            },
            livereload: {
                options: {
                    open: true
                }
            }
        }
        watch: {
            less: {
                files: 'src/less/**/*.less'
                tasks: ['less']
            }
            livereload: {
                options: {
                    livereload: '<%= connect.options.livereload %>'
                }
                files: [
                    '{,*/}*.html'
                    'dist/**/css/{,*/}*.css'
                    'dist/**/js/{,*/}*.js'
                ]
            }
        }
    }

    grunt.registerTask 'test', ['karma', 'coveralls']

    grunt.registerTask 'buildjs', ['requirejs', 'copy', 'uglify:*']

    grunt.registerTask 'buildcss', ['less', 'cssmin']

    grunt.registerTask 'build', ['clean:build', 'buildjs', 'buildcss', 'usebanner']

    grunt.registerTask 'serve', ['build', 'connect:livereload', 'watch']

    grunt.registerTask 'server', ['serve']

    grunt.registerTask 'default', ['test']

    return
























