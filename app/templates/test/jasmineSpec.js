// Generated by CoffeeScript 1.8.0
define(function(require, exports, module) {
  describe("Jasmine expect", function() {
    beforeEach(function() {
      return console.log("-------beforeEach-------");
    });
    afterEach(function() {
      return console.log("-------endEach---------");
    });
    it("toEqual", function() {
      var obj1, obj2, var1, var2;
      var1 = "1";
      var2 = 1;
      obj1 = {
        name: 1,
        age: 2
      };
      obj2 = {
        name: 1,
        age: 2
      };
      expect(void 0).toEqual(null);
      expect(obj1).toEqual(obj2);
      expect(false).not.toEqual(true);
      return expect(var1).not.toEqual(var2);
    });
    it("toBe", function() {
      var obj1, obj2, var1, var2;
      var1 = 'hello';
      var2 = 'hello';
      obj1 = {
        name: 1,
        age: 2
      };
      obj2 = {
        name: 1,
        age: 2
      };
      expect(true).toBe(true);
      expect(var1).toBe(var2);
      expect(obj1).not.toBe(obj2);
      return expect(void 0).not.toBe(null);
    });
    it("toMatch", function() {
      var str;
      str = "kobe wade rose";
      expect(str).toMatch("kobe");
      expect(str).toMatch(/wade/);
      return expect(str).not.toMatch('paul');
    });
    it("toBeDefined", function() {
      var obj, obj2;
      obj = {
        name: 'name',
        age: 15
      };
      obj2 = null;
      expect(obj).toBeDefined();
      expect(obj.name).toBeDefined();
      expect(obj.sex).not.toBeDefined();
      return expect(obj2).toBeDefined();
    });
    it("toBeUndefined", function() {
      var obj, obj2;
      obj = {
        name: "name",
        age: 26
      };
      obj2 = null;
      expect(obj.sex).toBeUndefined();
      expect(obj.name).not.toBeUndefined();
      return expect(obj2).not.toBeUndefined();
    });
    it("toBeNull", function() {
      var obj, obj2, obj3;
      obj = {};
      obj2 = null;
      obj3 = [];
      expect(obj).not.toBeNull();
      expect(obj2).toBeNull();
      return expect(obj3).not.toBeNull();
    });
    it("toBeTruthy", function() {
      var obj, obj2, obj3, obj4, obj5, obj6;
      obj = 1;
      obj2 = "false";
      obj3 = {};
      obj4 = 0;
      obj5 = "";
      obj6 = null;
      expect(obj).toBeTruthy();
      expect(obj2).toBeTruthy();
      expect(obj3).toBeTruthy();
      expect(obj4).not.toBeTruthy();
      expect(obj5).not.toBeTruthy();
      return expect(obj6).not.toBeTruthy();
    });
    it("toBeFalsy", function() {
      var obj, obj2, obj3, obj4, obj5, obj6;
      obj = 1;
      obj2 = "false";
      obj3 = {};
      obj4 = 0;
      obj5 = "";
      obj6 = null;
      expect(obj).not.toBeFalsy();
      expect(obj2).not.toBeFalsy();
      expect(obj3).not.toBeFalsy();
      expect(obj4).toBeFalsy();
      expect(obj5).toBeFalsy();
      return expect(obj6).toBeFalsy();
    });
    it("toContain", function() {
      var arr;
      arr = ["wade", "kobe", "rose", 1, 2, 3];
      expect(arr).toContain('kobe');
      expect(arr).not.toContain('jeck');
      expect(arr).toContain(1);
      return expect(arr).not.toContain("1");
    });
    it("toBeLessThan", function() {
      var int1, int2;
      int1 = 2.789;
      int2 = 2.987;
      expect(int1).toBeLessThan(int2);
      return expect(int2).not.toBeLessThan(int1);
    });
    it("toBeGreaterThan", function() {
      var int1, int2;
      int1 = 2.789;
      int2 = 2.987;
      expect(int1).not.toBeGreaterThan(int2);
      return expect(int2).toBeGreaterThan(int1);
    });
    return it("toBeCloseTo", function() {
      var int1, int2;
      int1 = 2.781;
      int2 = 2.788;
      expect(int1).toBeCloseTo(int2, 1);
      return expect(int1).not.toBeCloseTo(int2, 2);
    });
  });
  xdescribe("Jasmine xdescribe", function() {
    xit("xit", function() {
      return expect(true).toEqual(false);
    });
    return it("it", function() {
      return expect(true).toEqual(false);
    });
  });
  xdescribe("Jasmine spy", function() {
    var bar, foo;
    foo = null;
    bar = null;
    beforeEach(function() {
      foo = {
        setBar: function(value) {
          return bar = value;
        }
      };
      spyOn(foo, 'setBar');
      foo.setBar(123);
      return foo.setBar(456, 'hehe');
    });
    it("toHaveBeenCalled", function() {
      return expect(foo.setBar).toHaveBeenCalled();
    });
    it("calls", function() {
      expect(foo.setBar.calls.length).toEqual(2);
      return expect(foo.setBar.calls[0].args[0]).toEqual(123);
    });
    it("toHaveBeenCalledWith", function() {
      expect(foo.setBar).toHaveBeenCalledWith(123);
      return expect(foo.setBar).toHaveBeenCalledWith(456, "hehe");
    });
    it("mostRecentCall", function() {
      return expect(foo.setBar.mostRecentCall.args[0]).toEqual(456);
    });
    return it("end", function() {
      return expect(bar).toBeNull();
    });
  });
  xdescribe("Jasmine spy andCallThrough", function() {
    var bar, foo;
    foo = null;
    bar = null;
    beforeEach(function() {
      foo = {
        setBar: function(value) {
          return bar = value;
        }
      };
      spyOn(foo, 'setBar').andCallThrough();
      foo.setBar(123);
      return foo.setBar(456, 'hehe');
    });
    it("toHaveBeenCalled", function() {
      return expect(foo.setBar).toHaveBeenCalled();
    });
    return it("end", function() {
      return expect(bar).toEqual(456);
    });
  });
  xdescribe("Jasmine spy andReturn", function() {
    var bar, fetchBar, foo;
    foo = null;
    bar = null;
    fetchBar = null;
    beforeEach(function() {
      foo = {
        setBar: function(value) {
          return bar = value;
        },
        getBar: function() {
          return bar;
        }
      };
      spyOn(foo, 'getBar').andReturn(789);
      foo.setBar(123);
      return fetchBar = foo.getBar();
    });
    it("toHaveBeenCalled", function() {
      return expect(foo.getBar).toHaveBeenCalled();
    });
    return it("end", function() {
      expect(bar).toEqual(123);
      return expect(fetchBar).toEqual(789);
    });
  });
  xdescribe("Jasmine spy andCallFake", function() {
    var bar, fetchBar, foo;
    foo = null;
    bar = null;
    fetchBar = null;
    beforeEach(function() {
      foo = {
        setBar: function(value) {
          return bar = value;
        },
        getBar: function() {
          return bar;
        }
      };
      spyOn(foo, 'getBar').andCallFake(function() {
        return 789;
      });
      foo.setBar(123);
      return fetchBar = foo.getBar();
    });
    it("toHaveBeenCalled", function() {
      return expect(foo.getBar).toHaveBeenCalled();
    });
    return it("end", function() {
      expect(bar).toEqual(123);
      return expect(fetchBar).toEqual(789);
    });
  });
  xdescribe("Jasmine spy createSpy", function() {
    var mySpy;
    mySpy = jasmine.createSpy('mySpy');
    mySpy(1, 2, 3);
    it("identity", function() {
      return expect(mySpy.identity).toEqual('mySpy');
    });
    return it("toHaveBeenCalled", function() {
      return expect(mySpy).toHaveBeenCalled();
    });
  });
  xdescribe("Jasmine spy createSpyObj", function() {
    var mySpyObj;
    mySpyObj = jasmine.createSpyObj('mySpyObj', ['play', 'pause', 'stop']);
    mySpyObj.play();
    mySpyObj.pause();
    mySpyObj.stop();
    it("toBeDefined", function() {
      expect(mySpyObj.play).toBeDefined();
      expect(mySpyObj.pause).toBeDefined();
      return expect(mySpyObj.stop).toBeDefined();
    });
    return it("toHaveBeenCalled", function() {
      expect(mySpyObj.play).toHaveBeenCalled();
      expect(mySpyObj.pause).toHaveBeenCalled();
      return expect(mySpyObj.stop).toHaveBeenCalled();
    });
  });
  xdescribe("Jasmine jasmine.any", function() {
    var myFn;
    myFn = jasmine.createSpy('myFn');
    myFn(123, 'name');
    return it("normal value", function() {
      expect({}).toEqual(jasmine.any(Object));
      expect(1).toEqual(jasmine.any(Number));
      expect("").toEqual(jasmine.any(String));
      return expect(myFn).toHaveBeenCalledWith(jasmine.any(Number), jasmine.any(String));
    });
  });
  xdescribe("Jasmine jasmine.Clock", function() {
    var timerCallback;
    timerCallback = null;
    beforeEach(function() {
      timerCallback = jasmine.createSpy('timerCallback');
      return jasmine.Clock.useMock();
    });
    it("causes a timeout to be called synchronously", function() {
      return setTimeout(function() {
        return timerCallback();
      }, 100);
    });
    expect(timerCallback).not.toHaveBeenCalled();
    jasmine.Clock.tick(101);
    return expect(timerCallback).toHaveBeenCalled();
  });
  return xdescribe("Jasmine runs&waitsFor", function() {
    var flag, value;
    value = null;
    flag = null;
    return it("runs&waitsFor", function() {
      runs(function() {
        flag = false;
        value = 0;
        return setTimeout(function() {
          return flag = true;
        }, 500);
      });
      waitsFor(function() {
        value += 1;
        return flag;
      }, "The value should be incremented.", 750);
      return runs(function() {
        return expect(value).toBeGreaterThan(0);
      });
    });
  });
});
