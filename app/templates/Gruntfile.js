// Generated by CoffeeScript 1.8.0
module.exports = function(grunt) {
  'use strict';
  var convert, pkg;
  pkg = grunt.file.readJSON('package.json');
  convert = function(name, path, contents) {
    var exportVar, item, k, moduleName, v;
    while (true) {
      item = contents.match(/(.+) = require\(['"].+['"]\);/);
      if (item == null) {
        break;
      }
      for (k in item) {
        v = item[k];
        if (k === "1") {
          moduleName = v.trim();
        }
        contents = contents.replace(new RegExp("(var.*) " + moduleName + ",?"), "$1");
        contents = contents.replace(/(var.*), *;/, "$1;");
      }
      contents = contents.replace(/(.+) = require\(['"].+['"]\);/, "");
    }
    contents = contents.replace(/.*Generated by CoffeeScript.*\n/, "");
    exportVar = contents.match(/return module.exports = (.*);/)[1];
    contents = contents.replace(/return module.exports = (.*);/, "return $1;");
    contents = contents.replace(/(.+) = require\(['"]$/, "");
    contents = contents.replace(/define\([^{]*?{/, "").replace(/\}\);[^}\w]*$/, "");
    contents = contents.replace(/define\(\[[^\]]+\]\)[\W\n]+$/, "");
    contents = contents.replace(/version = \"\";/, "version = \"" + pkg.version + "\"");
    contents = ("var " + exportVar + " = (function(){\n") + contents;
    contents += "\n})();\n";
    return contents;
  };
  require('load-grunt-tasks')(grunt);
  grunt.initConfig({
    pkg: pkg,
    banner: "/*\n * <%= pkg.name %>\n * Copyright <%= grunt.template.today(\"yyyy-mm-dd\") %> <%= pkg.author %>\n */",
    karma: {
      unit: {
        configFile: 'karma.conf.coffee',
        singleRun: true
      }
    },
    clean: {
      build: ['.tmp/dist/<%= pkg.version %>', 'dist/<%= pkg.version %>']
    },
    less: {
      compileCore: {
        options: {
          strictMath: true,
          sourceMap: true,
          outputSourceFiles: true,
          sourceMapURL: '<%= pkg.name %>.css.map',
          sourceMapFilename: '.tmp/dist/<%= pkg.version %>/css/<%= pkg.name %>.css.map'
        },
        files: {
          '.tmp/dist/<%= pkg.version %>/css/<%= pkg.name %>.css': 'src/less/<%= pkg.name %>.less'
        }
      }
    },
    cssmin: {
      options: {
        keepSpecialComments: '*',
        noAdvanced: true
      },
      core: {
        files: {
          '.tmp/dist/<%= pkg.version %>/css/<%= pkg.name %>.min.css': '.tmp/dist/<%= pkg.version %>/css/<%= pkg.name %>.css'
        }
      }
    },
    usebanner: {
      dist: {
        options: {
          position: 'top',
          banner: '<%= banner %>'
        },
        files: {
          src: ['.tmp/dist/<%= pkg.version %>/css/<%= pkg.name %>.css', '.tmp/dist/<%= pkg.version %>/css/<%= pkg.name %>.min.css']
        }
      }
    },
    requirejs: {

      /* r.js exmaple build file
       *  https://github.com/jrburke/r.js/blob/master/build/example.build.js
       */
      compile: {
        options: {
          name: "<%= pkg.name %>",
          baseUrl: "src/js/",
          out: ".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>.js",
          optimize: 'none',
          findNestedDependencies: true,
          skipSemiColonInsertion: true,
          wrap: {
            startFile: "src/js/wrap.start",
            endFile: "src/js/wrap.end"
          },
          onBuildWrite: convert
        }
      }
    },
    copy: {
      sea: {
        files: {
          ".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.js": [".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>.js"]
        },
        options: {
          process: function(content, srcpath) {
            return "define(function(require, exports, module) {" + content + "});";
          }
        }
      },
      build: {
        expand: true,
        cwd: ".tmp/dist/<%= pkg.version %>/",
        src: ["**"],
        dest: "dist/<%= pkg.version %>/"
      }
    },
    uglify: {
      standalone: {
        files: {
          ".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>.min.js": [".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>.js"]
        },
        options: {
          banner: '<%= banner %>',
          preserveComments: false,
          sourceMap: true,
          sourceMapName: ".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>.min.map",
          report: "min",
          beautify: {
            "ascii_only": true
          },
          compress: {
            "hoist_funs": false,
            loops: false,
            unused: false
          }
        }
      },
      sea: {
        files: {
          ".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.min.js": [".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.js"]
        },
        options: {
          banner: '<%= banner %>',
          preserveComments: false,
          sourceMap: true,
          sourceMapName: ".tmp/dist/<%= pkg.version %>/js/<%= pkg.name %>-sea.min.map",
          report: "min",
          beautify: {
            "ascii_only": true
          },
          compress: {
            "hoist_funs": false,
            loops: false,
            unused: false
          }
        }
      }
    },
    coveralls: {
      options: {
        debug: true,
        coverage_dir: 'coverage/',
        dryRun: process.env.TRAVIS != null ? false : true,
        force: true,
        recursive: true
      }
    },
    connect: {
      options: {
        port: 9007,
        livereload: 42201,
        hostname: 'localhost',
        base: '.'
      },
      livereload: {
        options: {
          open: true
        }
      }
    },
    watch: {
      less: {
        files: 'src/less/**/*.less',
        tasks: ['less']
      },
      js: {
        files: 'src/js/**/*.js',
        tasks: ['requirejs']
      },
      livereload: {
        options: {
          livereload: '<%= connect.options.livereload %>'
        },
        files: ['{,*/}*.html', '.tmp/dist/**/css/{,*/}*.css', '.tmp/dist/**/js/{,*/}*.js']
      }
    }
  });
  grunt.registerTask('test', ['karma', 'coveralls']);
  grunt.registerTask('buildjs', ['requirejs', 'copy:sea', 'uglify:*']);
  grunt.registerTask('buildcss', ['less', 'cssmin']);
  grunt.registerTask('build', ['clean:build', 'buildjs', 'buildcss', 'usebanner', 'copy:build']);
  grunt.registerTask('serve', ['buildjs', 'buildcss', 'connect:livereload', 'watch']);
  grunt.registerTask('server', ['serve']);
  grunt.registerTask('default', ['test']);
};
